# OpenRouter API settings
openrouter:
  api_key: "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"
  base_url: "https://openrouter.ai/api/v1"
  
  # IMPORTANT: When selecting a model, ensure it has a high context window (200k+ tokens recommended)
  # The orchestrator can generate large amounts of results from multiple agents that need to be
  # processed together during synthesis. Low context window models may fail or truncate results.
  model: "moonshotai/kimi-k2:free"

# System prompt for the agent
system_prompt: |
  You are a helpful research assistant. When users ask questions that require 
  current information or web search, use the search tool and all other tools available to find relevant 
  information and provide comprehensive answers based on the results.
  
  IMPORTANT: When you have fully satisfied the user's request and provided a complete answer, 
  you MUST call the mark_task_complete tool with a summary of what was accomplished and 
  a final message for the user. This signals that the task is finished.

# Agent settings
agent:
  max_iterations: 10

# Orchestrator settings
orchestrator:
  parallel_agents: 4  # Number of agents to run in parallel
  task_timeout: 300   # Timeout in seconds per agent
  aggregation_strategy: "consensus"  # How to combine results
  
  # Question generation prompt for orchestrator
  question_generation_prompt: |
    You are an orchestrator that needs to create {num_agents} different questions to thoroughly analyze this topic from multiple angles.
    
    Original user query: {user_input}
    
    Generate exactly {num_agents} different, specific questions that will help gather comprehensive information about this topic.
    Each question should approach the topic from a different angle (research, analysis, verification, alternatives, etc.).
    
    Return your response as a JSON array of strings, like this:
    ["question 1", "question 2", "question 3", "question 4"]
    
    After providing the JSON array, IMMEDIATELY call the mark_task_complete tool to signal that question generation is finished.

  # Synthesis prompt for combining all agent responses
  synthesis_prompt: |
    You have {num_responses} different AI agents that analyzed the same query from different perspectives. 
    Your job is to synthesize their responses into ONE comprehensive final answer.
    
    Here are all the agent responses:
    
    {agent_responses}
    
    IMPORTANT: Just synthesize these into ONE final comprehensive answer that combines the best information from all agents. 
    Do NOT call mark_task_complete or any other tools. Do NOT mention that you are synthesizing multiple responses. 
    Simply provide the final synthesized answer directly as your response.

# Search tool settings
search:
  max_results: 5
  user_agent: "Mozilla/5.0 (compatible; OpenRouter Agent)"

# UI and Display settings
ui:
  # Enable rich terminal output with colors and progress bars
  rich_output: true
  
  # Show real-time progress updates during execution
  show_progress: true
  
  # Update frequency for progress displays (times per second)
  progress_update_frequency: 4
  
  # Show detailed metrics (API calls, tokens, execution time)
  show_metrics: true
  
  # Show timeline of operations
  show_timeline: true
  
  # Maximum number of timeline events to display
  max_timeline_events: 10
  
  # Silent mode - suppress all output except results
  silent_mode: false
  
  # Verbose mode - show additional debug information
  verbose_mode: false

# Logging settings
logging:
  # Enable structured logging
  enabled: true
  
  # Log level (DEBUG, INFO, WARNING, ERROR)
  level: "INFO"
  
  # Log to file in addition to console
  log_to_file: false
  
  # Log file path (if log_to_file is true)
  log_file_path: "make_it_heavy.log"
  
  # Log format
  log_format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # Include timestamps in console output
  include_timestamps: true
  
  # Log API calls and responses (be careful with sensitive data)
  log_api_calls: false

# Performance settings
performance:
  # Maximum concurrent agents (should not exceed parallel_agents)
  max_concurrent_agents: 4
  
  # API call timeout in seconds
  api_timeout: 30
  
  # Retry failed API calls
  retry_failed_calls: true
  
  # Maximum number of retries
  max_retries: 3
  
  # Delay between retries in seconds
  retry_delay: 1.0
